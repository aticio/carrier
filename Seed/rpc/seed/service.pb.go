// Code generated by protoc-gen-go. DO NOT EDIT.
// seed: service.proto

/*
Package com_carrier_seed is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	Seed
	Result
	Seeds
	Void
*/
package com_carrier_seed

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Seed struct {
	Host       string            `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Port       string            `protobuf:"bytes,2,opt,name=port" json:"port,omitempty"`
	Jvm        string            `protobuf:"bytes,3,opt,name=jvm" json:"jvm,omitempty"`
	Username   string            `protobuf:"bytes,4,opt,name=username" json:"username,omitempty"`
	Password   string            `protobuf:"bytes,5,opt,name=password" json:"password,omitempty"`
	Attributes []*Seed_Attribute `protobuf:"bytes,6,rep,name=attributes" json:"attributes,omitempty"`
}

func (m *Seed) Reset()                    { *m = Seed{} }
func (m *Seed) String() string            { return proto.CompactTextString(m) }
func (*Seed) ProtoMessage()               {}
func (*Seed) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Seed) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Seed) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *Seed) GetJvm() string {
	if m != nil {
		return m.Jvm
	}
	return ""
}

func (m *Seed) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Seed) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Seed) GetAttributes() []*Seed_Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type Seed_Attribute struct {
	Type     string                   `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Name     string                   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Url      string                   `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	Interval string                   `protobuf:"bytes,4,opt,name=interval" json:"interval,omitempty"`
	Metrics  []*Seed_Attribute_Metric `protobuf:"bytes,5,rep,name=metrics" json:"metrics,omitempty"`
}

func (m *Seed_Attribute) Reset()                    { *m = Seed_Attribute{} }
func (m *Seed_Attribute) String() string            { return proto.CompactTextString(m) }
func (*Seed_Attribute) ProtoMessage()               {}
func (*Seed_Attribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *Seed_Attribute) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Seed_Attribute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Seed_Attribute) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Seed_Attribute) GetInterval() string {
	if m != nil {
		return m.Interval
	}
	return ""
}

func (m *Seed_Attribute) GetMetrics() []*Seed_Attribute_Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type Seed_Attribute_Metric struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Jpath string `protobuf:"bytes,2,opt,name=jpath" json:"jpath,omitempty"`
}

func (m *Seed_Attribute_Metric) Reset()                    { *m = Seed_Attribute_Metric{} }
func (m *Seed_Attribute_Metric) String() string            { return proto.CompactTextString(m) }
func (*Seed_Attribute_Metric) ProtoMessage()               {}
func (*Seed_Attribute_Metric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0, 0} }

func (m *Seed_Attribute_Metric) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Seed_Attribute_Metric) GetJpath() string {
	if m != nil {
		return m.Jpath
	}
	return ""
}

type Result struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Result) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type Seeds struct {
	Seeds []*Seed `protobuf:"bytes,1,rep,name=seeds" json:"seeds,omitempty"`
}

func (m *Seeds) Reset()                    { *m = Seeds{} }
func (m *Seeds) String() string            { return proto.CompactTextString(m) }
func (*Seeds) ProtoMessage()               {}
func (*Seeds) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Seeds) GetSeeds() []*Seed {
	if m != nil {
		return m.Seeds
	}
	return nil
}

type Void struct {
}

func (m *Void) Reset()                    { *m = Void{} }
func (m *Void) String() string            { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()               {}
func (*Void) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*Seed)(nil), "com.carrier.seed.Seed")
	proto.RegisterType((*Seed_Attribute)(nil), "com.carrier.seed.Seed.Attribute")
	proto.RegisterType((*Seed_Attribute_Metric)(nil), "com.carrier.seed.Seed.Attribute.Metric")
	proto.RegisterType((*Result)(nil), "com.carrier.seed.Result")
	proto.RegisterType((*Seeds)(nil), "com.carrier.seed.Seeds")
	proto.RegisterType((*Void)(nil), "com.carrier.seed.Void")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SeedService service

type SeedServiceClient interface {
	AddSeed(ctx context.Context, in *Seed, opts ...grpc.CallOption) (*Result, error)
	GetSeed(ctx context.Context, in *Seed, opts ...grpc.CallOption) (*Seed, error)
	UpdateSeed(ctx context.Context, in *Seed, opts ...grpc.CallOption) (*Result, error)
	GetAll(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Seeds, error)
}

type seedServiceClient struct {
	cc *grpc.ClientConn
}

func NewSeedServiceClient(cc *grpc.ClientConn) SeedServiceClient {
	return &seedServiceClient{cc}
}

func (c *seedServiceClient) AddSeed(ctx context.Context, in *Seed, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/com.carrier.seed.SeedService/AddSeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seedServiceClient) GetSeed(ctx context.Context, in *Seed, opts ...grpc.CallOption) (*Seed, error) {
	out := new(Seed)
	err := grpc.Invoke(ctx, "/com.carrier.seed.SeedService/GetSeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seedServiceClient) UpdateSeed(ctx context.Context, in *Seed, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/com.carrier.seed.SeedService/UpdateSeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seedServiceClient) GetAll(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Seeds, error) {
	out := new(Seeds)
	err := grpc.Invoke(ctx, "/com.carrier.seed.SeedService/GetAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SeedService service

type SeedServiceServer interface {
	AddSeed(context.Context, *Seed) (*Result, error)
	GetSeed(context.Context, *Seed) (*Seed, error)
	UpdateSeed(context.Context, *Seed) (*Result, error)
	GetAll(context.Context, *Void) (*Seeds, error)
}

func RegisterSeedServiceServer(s *grpc.Server, srv SeedServiceServer) {
	s.RegisterService(&_SeedService_serviceDesc, srv)
}

func _SeedService_AddSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Seed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeedServiceServer).AddSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.carrier.seed.SeedService/AddSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeedServiceServer).AddSeed(ctx, req.(*Seed))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeedService_GetSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Seed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeedServiceServer).GetSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.carrier.seed.SeedService/GetSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeedServiceServer).GetSeed(ctx, req.(*Seed))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeedService_UpdateSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Seed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeedServiceServer).UpdateSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.carrier.seed.SeedService/UpdateSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeedServiceServer).UpdateSeed(ctx, req.(*Seed))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeedService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeedServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.carrier.seed.SeedService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeedServiceServer).GetAll(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _SeedService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.carrier.seed.SeedService",
	HandlerType: (*SeedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSeed",
			Handler:    _SeedService_AddSeed_Handler,
		},
		{
			MethodName: "GetSeed",
			Handler:    _SeedService_GetSeed_Handler,
		},
		{
			MethodName: "UpdateSeed",
			Handler:    _SeedService_UpdateSeed_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _SeedService_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xc1, 0x6a, 0xe3, 0x30,
	0x10, 0x86, 0x71, 0x9c, 0x28, 0xeb, 0xd9, 0x0d, 0x04, 0xb1, 0x2c, 0xc2, 0x7b, 0x09, 0x66, 0x0f,
	0x81, 0x05, 0x1f, 0xb2, 0x7b, 0x0f, 0x21, 0x6d, 0x73, 0xea, 0xc5, 0xa1, 0xbd, 0x3b, 0xb6, 0x20,
	0x0e, 0x76, 0x64, 0xa4, 0x51, 0x4a, 0x9f, 0xa6, 0xd0, 0xe7, 0xea, 0xc3, 0x14, 0x49, 0x56, 0x08,
	0x34, 0x29, 0xa5, 0xbd, 0xcd, 0xfc, 0xff, 0xfc, 0x93, 0x6f, 0x82, 0x0c, 0x23, 0xc5, 0xe5, 0xa1,
	0x2a, 0x78, 0xda, 0x4a, 0x81, 0x82, 0xd2, 0x42, 0x34, 0x69, 0x21, 0xb4, 0xac, 0xb8, 0x4c, 0x95,
	0xd0, 0xb2, 0xe0, 0xc9, 0x53, 0x08, 0x64, 0x6d, 0x4b, 0x4a, 0xa1, 0xbf, 0x15, 0x0a, 0x59, 0x30,
	0x09, 0xa6, 0x51, 0x66, 0x6b, 0xa3, 0xb5, 0x42, 0x22, 0xeb, 0x39, 0xcd, 0xd4, 0x74, 0x0c, 0xe1,
	0xee, 0xd0, 0xb0, 0xd0, 0x4a, 0xa6, 0xa4, 0x31, 0x7c, 0xd3, 0x8a, 0xcb, 0x7d, 0xde, 0x70, 0xd6,
	0xb7, 0xf2, 0xb1, 0x37, 0x5e, 0x9b, 0x2b, 0xf5, 0x20, 0x64, 0xc9, 0x06, 0xce, 0xf3, 0x3d, 0xbd,
	0x02, 0xc8, 0x11, 0x65, 0xb5, 0xd1, 0xc8, 0x15, 0x23, 0x93, 0x70, 0xfa, 0x7d, 0xf6, 0x27, 0x7d,
	0x4b, 0x99, 0x3a, 0xc2, 0x74, 0xe1, 0x87, 0xb3, 0x93, 0x5c, 0xfc, 0x12, 0x40, 0x74, 0x74, 0x0c,
	0x31, 0x3e, 0xb6, 0xdc, 0x5f, 0x61, 0x6a, 0xa3, 0x59, 0xb6, 0xee, 0x0a, 0xcb, 0x35, 0x86, 0x50,
	0xcb, 0xda, 0x5f, 0xa1, 0x65, 0x6d, 0x48, 0xab, 0x3d, 0x72, 0x79, 0xc8, 0x6b, 0x7f, 0x85, 0xef,
	0xe9, 0x35, 0x0c, 0x1b, 0x8e, 0xb2, 0x2a, 0x14, 0x1b, 0x58, 0xcc, 0xbf, 0x1f, 0xc1, 0x4c, 0x6f,
	0x6d, 0x26, 0xf3, 0xd9, 0x78, 0x06, 0xc4, 0x49, 0x47, 0xa4, 0xe0, 0x04, 0xe9, 0x27, 0x0c, 0x76,
	0x6d, 0x8e, 0xdb, 0x8e, 0xd3, 0x35, 0xc9, 0x04, 0x48, 0xc6, 0x95, 0xae, 0x91, 0xfe, 0x02, 0xa2,
	0x30, 0x47, 0xad, 0xba, 0x54, 0xd7, 0x25, 0x73, 0x18, 0xba, 0x5f, 0x56, 0xf4, 0x3f, 0x0c, 0x1d,
	0x8b, 0x99, 0x31, 0x9c, 0xf1, 0x65, 0xce, 0xcc, 0x8f, 0x26, 0x04, 0xfa, 0xf7, 0xa2, 0x2a, 0x67,
	0xcf, 0x3d, 0x18, 0x39, 0x6f, 0xed, 0x1e, 0x0e, 0x5d, 0x42, 0xb4, 0x28, 0xcb, 0xee, 0x81, 0xbc,
	0xb3, 0x2b, 0x3e, 0xeb, 0x75, 0xdc, 0x4b, 0x88, 0x56, 0x1c, 0x3f, 0xbb, 0xa4, 0xcb, 0xdd, 0xc0,
	0x8f, 0xbb, 0xb6, 0xcc, 0x91, 0x7f, 0x11, 0x66, 0x0e, 0x64, 0xc5, 0x71, 0x51, 0xd7, 0x94, 0x9d,
	0x9b, 0x32, 0xff, 0x43, 0xfc, 0xfb, 0xf2, 0x6e, 0xb5, 0x21, 0xf6, 0x63, 0xfa, 0xf7, 0x1a, 0x00,
	0x00, 0xff, 0xff, 0x6d, 0x6b, 0x50, 0xa6, 0x5d, 0x03, 0x00, 0x00,
}
