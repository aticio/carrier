// Code generated by protoc-gen-go. DO NOT EDIT.
// seed: service.proto

/*
Package com_carrier_carrier is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	Carrier
	Result
	Void
*/
package com_carrier_carrier

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Carrier struct {
	Host string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Port string `protobuf:"bytes,2,opt,name=port" json:"port,omitempty"`
}

func (m *Carrier) Reset()                    { *m = Carrier{} }
func (m *Carrier) String() string            { return proto.CompactTextString(m) }
func (*Carrier) ProtoMessage()               {}
func (*Carrier) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Carrier) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Carrier) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

type Result struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Result) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type Void struct {
}

func (m *Void) Reset()                    { *m = Void{} }
func (m *Void) String() string            { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()               {}
func (*Void) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Carrier)(nil), "com.carrier.carrier.Carrier")
	proto.RegisterType((*Result)(nil), "com.carrier.carrier.Result")
	proto.RegisterType((*Void)(nil), "com.carrier.carrier.Void")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CarrierService service

type CarrierServiceClient interface {
	UpdateCarrier(ctx context.Context, in *Carrier, opts ...grpc.CallOption) (*Result, error)
	AddCarrier(ctx context.Context, in *Carrier, opts ...grpc.CallOption) (*Result, error)
	DeleteCarrier(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Result, error)
}

type carrierServiceClient struct {
	cc *grpc.ClientConn
}

func NewCarrierServiceClient(cc *grpc.ClientConn) CarrierServiceClient {
	return &carrierServiceClient{cc}
}

func (c *carrierServiceClient) UpdateCarrier(ctx context.Context, in *Carrier, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/com.carrier.carrier.CarrierService/UpdateCarrier", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carrierServiceClient) AddCarrier(ctx context.Context, in *Carrier, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/com.carrier.carrier.CarrierService/AddCarrier", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carrierServiceClient) DeleteCarrier(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/com.carrier.carrier.CarrierService/DeleteCarrier", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CarrierService service

type CarrierServiceServer interface {
	UpdateCarrier(context.Context, *Carrier) (*Result, error)
	AddCarrier(context.Context, *Carrier) (*Result, error)
	DeleteCarrier(context.Context, *Void) (*Result, error)
}

func RegisterCarrierServiceServer(s *grpc.Server, srv CarrierServiceServer) {
	s.RegisterService(&_CarrierService_serviceDesc, srv)
}

func _CarrierService_UpdateCarrier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Carrier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarrierServiceServer).UpdateCarrier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.carrier.carrier.CarrierService/UpdateCarrier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarrierServiceServer).UpdateCarrier(ctx, req.(*Carrier))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarrierService_AddCarrier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Carrier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarrierServiceServer).AddCarrier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.carrier.carrier.CarrierService/AddCarrier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarrierServiceServer).AddCarrier(ctx, req.(*Carrier))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarrierService_DeleteCarrier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarrierServiceServer).DeleteCarrier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.carrier.carrier.CarrierService/DeleteCarrier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarrierServiceServer).DeleteCarrier(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _CarrierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.carrier.carrier.CarrierService",
	HandlerType: (*CarrierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateCarrier",
			Handler:    _CarrierService_UpdateCarrier_Handler,
		},
		{
			MethodName: "AddCarrier",
			Handler:    _CarrierService_AddCarrier_Handler,
		},
		{
			MethodName: "DeleteCarrier",
			Handler:    _CarrierService_DeleteCarrier_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 186 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x4e, 0xce, 0xcf, 0xd5, 0x4b,
	0xce, 0x2f, 0x2d, 0xca, 0x4c, 0x2d, 0x82, 0xd1, 0x4a, 0x86, 0x5c, 0xec, 0xce, 0x10, 0xa6, 0x90,
	0x10, 0x17, 0x4b, 0x46, 0x7e, 0x71, 0x89, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x98, 0x0d,
	0x12, 0x2b, 0xc8, 0x2f, 0x2a, 0x91, 0x60, 0x82, 0x88, 0x81, 0xd8, 0x4a, 0x0a, 0x5c, 0x6c, 0x41,
	0xa9, 0xc5, 0xa5, 0x39, 0x25, 0x42, 0x62, 0x5c, 0x6c, 0xc5, 0x25, 0x89, 0x25, 0xa5, 0xc5, 0x50,
	0x3d, 0x50, 0x9e, 0x12, 0x1b, 0x17, 0x4b, 0x58, 0x7e, 0x66, 0x8a, 0xd1, 0x3b, 0x46, 0x2e, 0x3e,
	0xa8, 0xe9, 0xc1, 0x10, 0xa7, 0x08, 0x79, 0x71, 0xf1, 0x86, 0x16, 0xa4, 0x24, 0x96, 0xa4, 0xc2,
	0x6c, 0x95, 0xd1, 0xc3, 0xe2, 0x2c, 0x3d, 0xa8, 0xac, 0x94, 0x34, 0x56, 0x59, 0xa8, 0xf5, 0xee,
	0x5c, 0x5c, 0x8e, 0x29, 0x29, 0x54, 0x31, 0x88, 0xd7, 0x25, 0x35, 0x27, 0x15, 0xe1, 0x28, 0x49,
	0xac, 0xaa, 0x41, 0x7e, 0xc2, 0x6b, 0x50, 0x12, 0x1b, 0x38, 0xa4, 0x8d, 0x01, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xa4, 0x29, 0x7c, 0xa6, 0x7a, 0x01, 0x00, 0x00,
}
